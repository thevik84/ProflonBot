from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.markdown import hbold
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram import F
import asyncio

# üîê –¢–æ–∫–µ–Ω –∏ ID –≥—Ä—É–ø–ø—ã
TOKEN = "8207794176:AAHqf1pphiDg0mkYDJ2_hYtWxTJY1R53bNM"
GROUP_CHAT_ID = -1002834809117

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏
user_data = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üßæ –û –Ω–∞—Å")],
        [KeyboardButton(text="‚úâÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é"
)

@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.first_name)}! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=menu_keyboard
    )

@dp.message(F.text == "üßæ –û –Ω–∞—Å")
async def about_handler(message: Message):
    await message.answer(
        "–ö–æ–º–ø–∞–Ω–∏—è <b>Proflon</b> —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º "
        "–Ω–∞–Ω–µ—Å–µ–Ω–∏–∏ —Ñ—Ç–æ—Ä–ø–æ–ª–∏–º–µ—Ä–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –∑–∞—â–∏—Ç—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è "
        "–æ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Å—Ä–µ–¥ –∏ –∏–∑–Ω–æ—Å–∞. –ú—ã —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ "
        "–ø–æ –≤—ã–±–æ—Ä—É –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é –ø–æ–∫—Ä—ã—Ç–∏–π –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏."
    )

@dp.message(F.text == "‚úâÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_application(message: Message):
    user_data[message.from_user.id] = {}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è</b>:")

@dp.message(lambda m: m.from_user.id in user_data and "name" not in user_data[m.from_user.id])
async def get_name(message: Message):
    user_data[message.from_user.id]["name"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>—Ç–µ–ª–µ—Ñ–æ–Ω</b>:")

@dp.message(lambda m: m.from_user.id in user_data and "phone" not in user_data[m.from_user.id])
async def get_phone(message: Message):
    user_data[message.from_user.id]["phone"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>email</b>:")

@dp.message(lambda m: m.from_user.id in user_data and "email" not in user_data[m.from_user.id])
async def get_email(message: Message):
    user_data[message.from_user.id]["email"] = message.text
    await message.answer("–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ <b>–∑–∞–¥–∞—á—É</b>:")

@dp.message(lambda m: m.from_user.id in user_data and "task" not in user_data[m.from_user.id])
async def get_task(message: Message):
    user_id = message.from_user.id
    user_data[user_id]["task"] = message.text

    data = user_data.pop(user_id)  # –æ—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –∑–∞—è–≤–∫–∏

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    text = (
        "–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ\n\n"
        f"<b>–ò–º—è:</b> {data['name']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
        f"<b>Email:</b> {data['email']}\n"
        f"<b>–ó–∞–¥–∞—á–∞:</b> {data['task']}\n\n"
        "–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
    )

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(text)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    await bot.send_message(GROUP_CHAT_ID, f"üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n\n{text}")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
